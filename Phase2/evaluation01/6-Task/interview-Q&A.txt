25. const keyword:

Used to define constants and prevent modifications. It can be used with variables, pointers, and member functions. In function the member data will be constant.


26. OOP concept with code:

Example illustrating inheritance, polymorphism, and encapsulation:


class Animal {
    protected:
        std::string name;
    public:
        virtual void sound() const = 0; // Pure virtual function
};

class Dog : public Animal {
    public:
        Dog(const std::string &dogName) { name = dogName; }
        void sound() const override {
            std::cout << name << " says Woof!" << std::endl;
        }
};

Inheritance : Animal is the base class.Dog is the derived class that inherits from Animal.
Polymorphism : The sound() function in Animal is a pure virtual function, making Animal an abstract class. This means any class inheriting from Animal must provide an implementation of sound().Dog provides its specific implementation of sound(), overriding the base class's function. This is runtime polymorphism as the method that gets called depends on the actual type of the object.
Encapsulation : The name attribute in Animal is protected, meaning it can be accessed only within the class itself and by derived classes, but not by other parts of the program.


27. Operator overloading code example:

Overloading the << operator

friend std::ostream& operator<<(std::ostream& os, const Person& person) {
        os << "Name: " << person.name << ", Age: " << person.age;
        return os;
    }
};

28. Set minimum balance in code for bank:

#include <iostream>

class BankAccount {
    private:
        static const int MIN_BALANCE = 100.0;
        double balance;

    public:
        BankAccount(double initialBalance) {
            balance = (initialBalance >= MIN_BALANCE) ? initialBalance : MIN_BALANCE;
        }

        void displayBalance() const {
            std::cout << "Current balance: $" << balance << std::endl;
        }
};

int main() {
    BankAccount account1(150.0);  // Initial balance is above minimum
    BankAccount account2(50.0);   // Initial balance is below minimum

    account1.displayBalance();    // Output: Current balance: $150
    account2.displayBalance();    // Output: Current balance: $100

    return 0;
}


29. Replace space in a string with an underscore:

    std::string replaceSpaces(std::string str) {
    std::replace(str.begin(), str.end(), ' ', '_');
    return str;
}

31. Create a class named Student and print using an array of objects:

class Student {
    std::string name;
    int id;
public:
    Student(const std::string &n, int i) : name(n), id(i) {}
    void display() const {
        std::cout << "Name: " << name << ", ID: " << id << std::endl;
    }
};

int main() {
    Student students[] = {Student("Alice", 1), Student("Bob", 2)};
    for (const auto &student : students) {
        student.display();
    }
    return 0;
}

32. Explain different OOP concepts:

Encapsulation: Bundling data and methods.

Abstraction: Hiding complex details.

Inheritance: Acquiring properties of another class.

Polymorphism: Multiple forms, e.g., method overriding.


33. Operator overloading example using =:

class Class {
    int value;
public:
    Class& operator=(const Class &other) {
        if (this != &other) {
            value = other.value;
        }
        return *this;
    }
};

34. Add sorting to the class:

class MyClass {
    std::vector<int> data;
public:
    void sortData() {
        std::sort(data.begin(), data.end());
    }
};

35. Coding examples:

Run time polymorphism:

class Base {
    public:
        virtual void show() {
            std::cout << "Base class" << std::endl;
        }
};
class Derived : public Base {
    public:
        void show() override {
            std::cout << "Derived class" << std::endl;
        }
};

Sum and average of numbers from a dynamically allocated array:

void calculateSumAndAvg(const std::vector<int>& arr, int &sum, double &avg) {
    sum = std::accumulate(arr.begin(), arr.end(), 0);
    avg = static_cast<double>(sum) / arr.size();
}


36. Theory explanations:

Threads and Synchronization: Threads allow concurrent execution; synchronization prevents data races.

Constructor and Destructor: Constructor initializes objects, destructor cleans up.

Types of Constructors: Default, parameterized, copy constructors.

Difference between Structure and Class: Structures have public members by default, classes it is private. 
Class encourages encapsulation, data hiding, and object-oriented features like inheritance and polymorphism.


37. Smart pointers:

Smart pointers in C++ (e.g., std::shared_ptr, std::unique_ptr and std::weak_ptr) manage dynamic memory automatically, preventing memory leaks.


38. Detailed explanation of OOP concepts with examples:

Inheritance: Inheritance in C++ is a mechanism that allows a new class (derived class) to acquire the properties and behaviors (members and methods) of an existing class (base class).

Polymorphism: Polymorphism in C++ is the ability of a single function, operator, or object to behave differently based on the context

Encapsulation: Encapsulation in C++ is the process of bundling data (variables) and methods (functions) that operate on the data into a single unit, typically a class, while restricting direct access to some of the class's components.

Abstraction: Abstraction in C++ is the concept of hiding the implementation details and showing only the necessary features.
40. Access Specifiers in C++

Access specifiers define the scope and accessibility of members (variables or methods) within a class.

1. Private:

Only accessible inside the same class.

Used to encapsulate data that shouldn't be accessed directly.



2. Protected:

Accessible inside the same class and by derived (child) classes.

Useful for inheritance.



3. Public:

Accessible from anywhere.




Code Example:

#include <iostream>
using namespace std;

class Base {
private:
    int privateVar = 10; // Accessible only within Base
protected:
    int protectedVar = 20; // Accessible in Base and derived classes
public:
    int publicVar = 30; // Accessible anywhere
    int getPrivateVar() { return privateVar; } // Getter for privateVar
};

class Derived : public Base {
public:
    void display() {
        // cout << privateVar; // Error: Not accessible
        cout << "ProtectedVar: " << protectedVar << endl;
        cout << "PublicVar: " << publicVar << endl;
    }
};

int main() {
    Derived obj;
    obj.display();
    cout << "PublicVar directly: " << obj.publicVar << endl;
    // cout << obj.protectedVar; // Error: Not accessible
    return 0;
}


---

43. Program on Inheritance

Inheritance is a feature of OOP that allows one class (child) to acquire the properties and methods of another class (parent).

Types of Inheritance:

1. Single: One child inherits from one parent.


2. Multilevel: A child inherits from a parent, and another class inherits from the child.


3. Hierarchical: Multiple children inherit from one parent.



Code Example:

#include <iostream>
using namespace std;

class Parent {
public:
    void displayParent() { cout << "This is the Parent class." << endl; }
};

class Child : public Parent {
public:
    void displayChild() { cout << "This is the Child class." << endl; }
};

int main() {
    Child obj;
    obj.displayParent(); // Access parent class method
    obj.displayChild();  // Access child class method
    return 0;
}


---

44. Default and Parameterized Constructors

Constructors are special methods called automatically when an object is created.

1. Default Constructor: Takes no arguments and initializes members to default values.


2. Parameterized Constructor: Takes arguments and initializes members with specific values.



Code Example:

#include <iostream>
using namespace std;

class Example {
public:
    Example() { // Default Constructor
        cout << "Default Constructor called!" << endl;
    }

    Example(int x) { // Parameterized Constructor
        cout << "Parameterized Constructor called with value: " << x << endl;
    }
};

int main() {
    Example obj1;     // Default constructor is called
    Example obj2(42); // Parameterized constructor is called
    return 0;
}


---

45. Passing Integer Variable from Parent to Child Using Constructor

To pass values from a parent class to a child class, use an initializer list in the child constructor.

Code Example:

#include <iostream>
using namespace std;

class Parent {
protected:
    int value;
public:
    Parent(int val) : value(val) { // Parent Constructor
        cout << "Parent Constructor called!" << endl;
    }
};

class Child : public Parent {
public:
    Child(int val) : Parent(val) { // Pass value to Parent Constructor
        cout << "Child Constructor called with value: " << value << endl;
    }
};

int main() {
    Child obj(100); // Pass 100 to the Parent class through Child
    return 0;
}


---

46. OOP Concepts with Examples

1. Encapsulation:

Hides internal details of a class and provides access via methods.
Example:

class Encapsulation {
private:
    int privateVar;
public:
    void setVar(int val) { privateVar = val; } // Setter
    int getVar() { return privateVar; }       // Getter
};

2. Inheritance:

Allows a child class to reuse the properties of a parent class.
Example:

class Parent {
public:
    void show() { cout << "Parent class" << endl; }
};

class Child : public Parent {};

3. Polymorphism:

Allows the same method to behave differently depending on the object.
Example:

class Base {
public:
    virtual void show() { cout << "Base class" << endl; }
};

class Derived : public Base {
public:
    void show() override { cout << "Derived class" << endl; }
};

4. Abstraction:

Hides unnecessary details and shows only the relevant features.
Example:

class Abstract {
public:
    virtual void display() = 0; // Pure virtual function
};



47. Polymorphism Using Pointer

Polymorphism is achieved via virtual functions and pointers to base classes.

Code Example:

#include <iostream>
using namespace std;

class Base {
public:
    virtual void display() { cout << "Base class" << endl; }
};

class Derived : public Base {
public:
    void display() override { cout << "Derived class" << endl; }
};

int main() {
    Base *basePtr;
    Derived derivedObj;
    basePtr = &derivedObj;
    basePtr->display(); // Calls Derived's display() method
    return 0;
}
